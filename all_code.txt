import json
import hashlib
from typing import Callable

class Blockchain():
    def  __init__(self):
        self.blockchain = []
        self.pool = []
        self.pool_limit = 3
        self.pubkey_nonce = {}
        genesis_block = self.propose_new_block('0' * 64)
        self.commit_block(genesis_block, True)

    def propose_new_block(self, previous_hash=None):
        block = {
            'index': len(self.blockchain) + 1,
            'transactions': self.pool.copy(),
            'previous_hash': previous_hash or self.blockchain[-1]['current_hash'],
        }
        block['current_hash'] = self.calculate_hash(block)
        return block
    
    def commit_block(self, block, genesis=False):
        # Remove transactions from pool that are being committed
        committed_transactions = block["transactions"]
        for commited_transaction in committed_transactions:
            # I think this for loop is not actually needed because
            # the nonce will be out of date if it is updated, however
            # not 100% so not going to do it.
            for transaction in self.pool:
                if commited_transaction == transaction:
                    self.pool.remove(transaction)
            pub_key = commited_transaction["sender"]
            nonce = commited_transaction["nonce"]
            self.pubkey_nonce[pub_key] = commited_transaction["nonce"]
            # print(f"Pubkey {pub_key}, Nonce {nonce}")
        
        # Remove transactions from pool that have nonces that are now out of date
        for transaction in self.pool:
            if not self.check_nonce(transaction["sender"], transaction["nonce"]):
                self.pool.remove(transaction)

        self.blockchain.append(block)
        if not genesis:
            self.on_new_block(block)

    def last_block(self):
        return self.blockchain[-1]

    def calculate_hash(self, block: dict):
        block_object: str = json.dumps({k: block.get(k) for k in ['index', 'transactions', 'previous_hash']}, sort_keys=True)
        block_string = block_object.encode()
        raw_hash = hashlib.sha256(block_string)
        hex_hash = raw_hash.hexdigest()
        return hex_hash

    def set_on_new_block(self, on_new_block: Callable):
        self.on_new_block = on_new_block
	
    def add_transaction(self, transaction):
        if len(self.pool) < self.pool_limit:
            self.pool.append(transaction)
            return True
        return False
    
    def check_nonce(self, pub_key, nonce):

        if pub_key in self.pubkey_nonce:
            if self.pubkey_nonce[pub_key] + 1 == nonce:
                return True
            else:
                return False
        else:
            if nonce == 0:
                return True
            return False

  from node import *
import threading

# private key for transactions
private_key = ed25519.Ed25519PrivateKey.from_private_bytes(bytes.fromhex('6dee02b55d8914c145568cb3f3b84586ead2a85910f5b062d7f3f29ddcb4c7aa'))
private_key2 = ed25519.Ed25519PrivateKey.from_private_bytes(bytes.fromhex('6d1e02b55d8914c145568cb3f3b84586ead2a85910f5b062d7f3f29ddcb4c7aa'))

# create nodes
runners = [ServerRunner('localhost', 9000 + i, f=1) for i in range(4)]

# start accepting incoming connections
for runner in runners:
	runner.start()

# connect other nodes
for i, runner in enumerate(runners):
	for j in range(4):
		if i != j:
			runner.append(RemoteNode('localhost', 9000 + j))

# create clients to send transactions
clients = [RemoteNode('localhost', 9000 + i) for i in range(4)]

# create a transaction
transaction = make_transaction('hello', private_key, 0)

transaction2 = make_transaction('howareyou', private_key, 1)

# set block callback
lock = threading.Lock()
cond = threading.Condition(lock)
blocks = []
def on_new_block(block):
	with lock:
		blocks.append(block)
		cond.notify()
for runner in runners:
	runner.blockchain.set_on_new_block(on_new_block)

# send the transaction
assert(clients[0].transaction(transaction) == True)

runners[2].stop()
runners.remove(runners[2])

# wait for the block from all nodes
with lock:
	cond.wait_for(lambda: len(blocks) == len(runners))

# check that the transaction is committed
assert(all([block['transactions'][0] == transaction for block in blocks]))

# stop the nodes
for runner in runners:
	runner.stop()

import unittest
from node import *
import threading

last_used_port = 9000

def get_unique_port():
    global last_used_port
    last_used_port += 1
    return last_used_port

class TestNode(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        # private keys for transactions
        cls.private_key = ed25519.Ed25519PrivateKey.from_private_bytes(bytes.fromhex('6dee02b55d8914c145568cb3f3b84586ead2a85910f5b062d7f3f29ddcb4c7aa'))
        cls.private_key2 = ed25519.Ed25519PrivateKey.from_private_bytes(bytes.fromhex('6d1e02b55d8914c145568cb3f3b84586ead2a85910f5b062d7f3f29ddcb4c7aa'))
    
    def on_new_block(self, block):
        with self.lock:
            self.blocks.append(block)
            self.cond.notify()

    def setUp(self):
        # create nodes
        ports = [get_unique_port() for _ in range(5)]

        # Create and start nodes
        self.runners = [ServerRunner('localhost', port, f=2) for port in ports]
        for runner in self.runners:
            runner.start()

        # Connect other nodes
        for i, runner in enumerate(self.runners):
            for j in range(len(ports)):
                if i != j:
                    runner.append(RemoteNode('localhost', ports[j]))

        # Create clients to send transactions
        self.clients = [RemoteNode('localhost', port) for port in ports]

        # Set block callback
        self.lock = threading.Lock()
        self.cond = threading.Condition(self.lock)
        self.blocks = []
        def on_new_block(block):
            with self.lock:
                self.blocks.append(block)
                self.cond.notify()
        for runner in self.runners:
            runner.blockchain.set_on_new_block(on_new_block)

    def tearDown(self):
        # stop the nodes
        for runner in self.runners:
            runner.stop()

    def test_transaction_1(self):
        # create a transaction
        transaction = make_transaction('test1', self.private_key, 0)

        # send the transaction
        self.assertTrue(self.clients[0].transaction(transaction))

        # wait for the block from all nodes
        with self.lock:
            self.cond.wait_for(lambda: len(self.blocks) == len(self.runners))

        # check that the transaction is committed
        self.assertTrue(all([block['transactions'][0] == transaction for block in self.blocks]))

    def test_transaction_2(self):

        # create a transaction
        transaction = make_transaction('test2', self.private_key, 0)

        # send the transaction
        self.assertTrue(self.clients[1].transaction(transaction))

        # wait for the block from all nodes
        with self.lock:
            self.cond.wait_for(lambda: len(self.blocks) == len(self.runners))

        # check that the transaction is committed
        self.assertTrue(all([block['transactions'][0] == transaction for block in self.blocks]))

    def test_2_transactions_same_node(self):

        #Create t1
        t1 = make_transaction("test3a", self.private_key2, 0)

        # create a transaction
        t2 = make_transaction('test3b', self.private_key, 0)

        # send the transaction
        self.assertTrue(self.clients[0].transaction(t1))
        self.assertTrue(self.clients[0].transaction(t2))

        # wait for the block from all nodes
        with self.lock:
            self.cond.wait_for(lambda: len(self.blocks) == len(self.runners))

        # check that the transaction is committed
        self.assertTrue(all([block['transactions'][0] == t1 and block['transactions'][1] == t2 for block in self.blocks]))

    def test_2_transactions_different_nodes(self):

        #Create t1
        t1 = make_transaction("test4a", self.private_key2, 0)

        # create a transaction
        t2 = make_transaction('test4b', self.private_key, 0)

        # send the transaction
        self.assertTrue(self.clients[0].transaction(t1))
        self.assertTrue(self.clients[1].transaction(t2))

        # wait for the block from all nodes
        with self.lock:
            self.cond.wait_for(lambda: len(self.blocks) == len(self.runners))

        t1_acc = all([block['transactions'][0] == t1 for block in self.blocks])

        t2_acc = all([block['transactions'][0] == t2 for block in self.blocks])

        # check that the transaction is committed
        self.assertTrue(t1_acc or t2_acc)

        self.blocks = []
        
        with self.lock:
            self.cond.wait_for(lambda: len(self.blocks) == len(self.runners))

        if not t2_acc:
            t2_acc = all([block['transactions'][0] == t2 for block in self.blocks])
            self.assertTrue(t2_acc)
            
        elif not t1_acc:
            t1_acc = all([block['transactions'][0] == t1 for block in self.blocks])
            self.assertTrue(t1_acc)

    def test_transaction_not_alnum(self):

        # create a transaction
        transaction = make_transaction('test 5', self.private_key, 0)

        # send the transaction
        self.assertFalse(self.clients[1].transaction(transaction))

    def test_2_same_nonce_transactions_same_node(self):

        #Create t1
        t1 = make_transaction("test6a", self.private_key, 0)

        # create a transaction
        t2 = make_transaction('test6b', self.private_key, 0)

        # send the transaction
        self.assertTrue(self.clients[0].transaction(t1))
        self.assertFalse(self.clients[0].transaction(t2))

        # wait for the block from all nodes
        with self.lock:
            self.cond.wait_for(lambda: len(self.blocks) == len(self.runners))

        t1_acc = all([block['transactions'][0] == t1 for block in self.blocks])
        # check that the transaction is committed
        self.assertTrue(t1_acc)

    def test_wrong_nonce_transaction(self):

        #Create t1
        t1 = make_transaction("test7", self.private_key, 1)

        # send the transaction
        self.assertFalse(self.clients[0].transaction(t1))

    def test_same_nonce_transactions_same_node_after_block_commit(self):

        #Create t1
        t1 = make_transaction("test8a", self.private_key, 0)

        # create a transaction

        # send the transaction
        self.assertTrue(self.clients[0].transaction(t1))

        # wait for the block from all nodes
        with self.lock:
            self.cond.wait_for(lambda: len(self.blocks) == len(self.runners))

        t1_acc = all([block['transactions'][0] == t1 for block in self.blocks])
        # check that the transaction is committed
        self.assertTrue(t1_acc)
        
        t2 = make_transaction('test8b', self.private_key, 0)
        self.assertFalse(self.clients[0].transaction(t2))

    def test_same_nonce_transactions_different_node_after_block_commit(self):

        #Create t1
        t1 = make_transaction("test8a", self.private_key, 0)

        # create a transaction

        # send the transaction
        self.assertTrue(self.clients[0].transaction(t1))

        # wait for the block from all nodes
        with self.lock:
            self.cond.wait_for(lambda: len(self.blocks) == len(self.runners))

        t1_acc = all([block['transactions'][0] == t1 for block in self.blocks])
        # check that the transaction is committed
        self.assertTrue(t1_acc)
        
        t2 = make_transaction('test8b', self.private_key, 0)
        self.assertFalse(self.clients[1].transaction(t2))

    def test_invalid_signature(self):

        # Create transaction
        t1 = {
            'sender': self.private_key.public_key().public_bytes_raw().hex(),
            'message': "test9",
            'nonce': 0
            }
        signature = self.private_key2.sign(transaction_bytes(t1)).hex()
        t1['signature'] = signature

        # send the transaction
        self.assertFalse(self.clients[0].transaction(t1))

    def test_invalid_format_message_type_wrong(self):

        # Create transaction
        t1 = {
            'sender': self.private_key.public_key().public_bytes_raw().hex(),
            'message': 20,
            'nonce': 0
            }
        signature = self.private_key.sign(transaction_bytes(t1)).hex()
        t1['signature'] = signature

        # send the transaction
        self.assertFalse(self.clients[0].transaction(t1))

    def test_invalid_format_sender_type_wrong(self):

        # Create transaction
        t1 = {
            'sender': "thisisnotakey",
            'message': 20,
            'nonce': 0
            }
        t1['signature'] = "Fakesignature"

        # send the transaction
        self.assertFalse(self.clients[0].transaction(t1))

    def test_invalid_format_nonce_type_wrong(self):

        # Create transaction
        t1 = {
            'sender': self.private_key.public_key().public_bytes_raw().hex(),
            'message': "invalidnoncetest",
            'nonce': "notanint"
            }
        signature = self.private_key.sign(transaction_bytes(t1)).hex()
        t1['signature'] = signature

        # send the transaction
        self.assertFalse(self.clients[0].transaction(t1))

    def test_invalid_format_signature_type_wrong(self):

        # Create transaction
        t1 = {
            'sender': self.private_key.public_key().public_bytes_raw().hex(),
            'message': "invalidSignatureTest",
            'nonce': 0
            }
        signature = self.private_key.sign(transaction_bytes(t1)).hex()
        t1['signature'] = "fakeSigfakeSig"

        # send the transaction
        self.assertFalse(self.clients[0].transaction(t1))

    def test_1_transaction_single_node_fails(self):
        # create a transaction
        transaction = make_transaction('test1', self.private_key, 0)

        # send the transaction
        self.assertTrue(self.clients[0].transaction(transaction))

        self.runners[1].stop
        self.runners.remove(self.runners[1])

        # wait for the block from all nodes
        with self.lock:
            self.cond.wait_for(lambda: len(self.blocks) == len(self.runners))

        # check that the transaction is committed
        self.assertTrue(all([block['transactions'][0] == transaction for block in self.blocks]))

    def test_1_transaction_two_nodes_fail(self):
        # create a transaction
        transaction = make_transaction('test1', self.private_key, 0)

        # send the transaction
        self.assertTrue(self.clients[0].transaction(transaction))

        self.runners[1].stop
        self.runners.remove(self.runners[1])
        
        # These turn into different nodes at index 1 because the one currently at 1 gets removed
        self.runners[1].stop
        self.runners.remove(self.runners[1])


        # wait for the block from all nodes
        with self.lock:
            self.cond.wait_for(lambda: len(self.blocks) == len(self.runners))

        # check that the transaction is committed
        self.assertTrue(all([block['transactions'][0] == transaction for block in self.blocks]))

    
    

if __name__ == '__main__':
    unittest.main()

from blockchain import *
import queue
import threading
import socket
import cryptography.hazmat.primitives.asymmetric.ed25519 as ed25519
import logging
from network import *
import time
import json

def transaction_bytes(transaction: dict):
	return json.dumps({k: transaction.get(k) for k in ['sender', 'message', 'nonce']},
	sort_keys=True).encode()

'''
Returns a transaction dictionary. Needs to be wrapped into a payload before sending. 
This is done for the sake of atomicity
'''
def make_transaction(message: str, private_key: ed25519.Ed25519PrivateKey, nonce: int) -> dict:
	transaction = {
		'sender': private_key.public_key().public_bytes_raw().hex(),
		'message': message,
		'nonce': nonce
		}
	signature = private_key.sign(transaction_bytes(transaction)).hex()
	transaction['signature'] = signature

	return transaction

class RemoteNode():
	def __init__(self, host, port) -> None:
		self.host = host
		self.port = port

	def transaction(self, transaction) -> bool:
		packet = {
			"type": "transaction",
			"payload": transaction
		}
		#Need to wait for response from server runner saying transaction is valid or invalid
		with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
			s.connect((self.host, self.port))
			send_prefixed(s, json.dumps(packet).encode())
			recv = recv_prefixed(s).decode('utf-8')
			# print(f"received: {recv}")
			if recv == "true":
				return True
			else:
				return False


class ServerRunner():
	def __init__(self, host, port, f) -> None:
		self.blockchain = Blockchain()
		self.host = host
		self.port = port
		self.failure_tolerance = f
		self.remote_nodes : list[socket.socket] = []

		self.consensusround_block : dict = {}

		self.consensusround_proposedblocks : dict[int, list[dict]] = {}

		self.current_round = 0

		self.stop_event = threading.Event()
		self.blockchain_lock = threading.Lock()
		self.pool_non_empty = threading.Event()
		self.next_round_request = threading.Event()
		self.s1_cond_lock = threading.Lock()
		self.pipeline_s1_wait_cond = threading.Condition(self.s1_cond_lock)
		self.server_thread = threading.Thread(target=self.start_server)
		self.pipeline_thread = threading.Thread(target=self.pipeline)

		#Set up logger
		self.logger = logging.getLogger(f"{port}")
		handler = logging.FileHandler(f"./logs/{port}.log", mode='w')
		handler.setFormatter(logging.Formatter('%(asctime)s [%(levelname)s] %(message)s'))
		self.logger.addHandler(handler)
		self.logger.setLevel(logging.INFO)
		self.logger.info("Node starting")
		
	def start(self):
		self.server_thread.start()
		self.pipeline_thread.start()

	def stop(self):
		self.logger.info("Stopping server")
		self.stop_event.set()
		for s in self.remote_nodes:
			s.close()
		self.logger.info("Connection to remote nodes closed")
		self.server_thread.join()
		self.logger.info("Server thread joined")
		self.pipeline_thread.join()
		self.logger.info("Pipeline thread joined")
		self.logger.info("Server Stopped")

	def append(self, remote_node: RemoteNode):
		remote_socket = self.connect_to_node(remote_node.host, remote_node.port)
		self.remote_nodes.append(remote_socket)

	def start_server(self):
		self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
		self.server_socket.bind((self.host, self.port))
		self.server_socket.listen()
		self.server_socket.settimeout(3.0)
		self.logger.info(f"Server listening on {self.host}:{self.port}")

		while not self.stop_event.is_set():
			try:
				client_sock, client_add = self.server_socket.accept()
			except socket.timeout:
				continue
			self.logger.info(f"Connection from {client_add}")
			client_thread = threading.Thread(target=self.handle_client, args=(client_sock,))
			client_thread.start()


# We can use this method to receive requests from remote nodes and send
# them responses
	def handle_client(self, client_socket: socket.socket):
		conn_failed = False
		client_socket.settimeout(3)
		while not self.stop_event.is_set():
			try:
				data = recv_prefixed(client_socket).decode()
				if not data: 
					break
				conn_failed = False
				received_dict = json.loads(data)			
				self.logger.info(f"Received from {client_socket.getpeername()}: {received_dict}")
				# So we have the socket here, so when we get a request from
				# a client we can use this socket (i think)
				# The messages received will always be a json_dump'd dictionary
				# of the form {"type": x, "payload": x}
				if received_dict["type"] == "transaction":
					# Validate transaction
					self.logger.info("transaction received")
					response = "false"
					transaction = received_dict["payload"]
					valid_transaction = self.validate_transaction(transaction)
					if valid_transaction == True:
						self.logger.info("Valid transaction received")
						with self.blockchain_lock:
							added_to_pool = self.blockchain.add_transaction(transaction)
						if added_to_pool == True:
							self.logger.info("Valid transaction was added to pool")
							response = "true"
							self.pool_non_empty.set()
							with self.s1_cond_lock:
								self.pipeline_s1_wait_cond.notify()
					else:
						self.logger.info(f"Invalid transaction received")


					send_prefixed(client_socket, response.encode('utf-8'))
				elif received_dict["type"] == "values":
					# Send block proposal at that index
					round = received_dict["payload"]
					self.ensure_block_for_consensus_round(round)
					proposed_blocks_in_round = self.consensusround_proposedblocks[round]
					self.logger.info(f"Received request for values in round {round}, they are {proposed_blocks_in_round}")
					send_prefixed(client_socket, json.dumps(proposed_blocks_in_round).encode())
					if round > self.current_round:
						self.next_round_request.set()
						with self.s1_cond_lock:
							self.pipeline_s1_wait_cond.notify()


			except RuntimeError as e:
				if conn_failed == False:
					self.logger.error(f'Connection failed first time {client_socket.getpeername()}: {type(e).__name__}: {e}')
					conn_failed = True
				elif conn_failed == True:
					self.logger.error(f'Connection failed second time, closing connection {client_socket.getpeername()}: {type(e).__name__}: {e}')
					break
			except socket.timeout as e:
				continue
			except Exception as e:
				self.logger.error(f'Error handling client {client_socket.getpeername()}: {type(e).__name__}: {e}')
		
		client_socket.close()

# We use this functionality including the append() method to send a request from
# this node. Since we never need to send a request to one specific node and instead
# send the request to all nodes, we just need the broadcast function
# Since these nodes are where we send requests, this is where the timeout stuff
# happens
	def connect_to_node(self, remote_host, remote_port):
		remote_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
		remote_socket.connect((remote_host, remote_port))
		# self.socket_port[remote_socket.getpeername()] = remote_socket
		self.logger.info(f"Connected to {remote_host}:{remote_socket}")
		return remote_socket

	# This method will be used to broadcast a values message
	def consensus_broadcast_routine(self, proposed_block: dict, round:int):
		self.logger.info(f"Entering consensus broadcast routine for round {round}")
		request = {
			"type": "values",
			"payload": round
		}
		if len(self.remote_nodes) < 2*self.failure_tolerance:
			self.logger.fatal("Number of accepted failures too large relative to number of remote nodes. Quitting")
			return None
		responses_count = [0] * len(self.remote_nodes)
		online = [True] * len(self.remote_nodes)
		for _ in range(self.failure_tolerance+1):
			self.logger.info(f"Failure tolerence round {_ + 1} commencing")
			for idx, remote_node in enumerate(self.remote_nodes):
				# If node is deemed as crashed during this consensus round, we do not try to contact it
				if online[idx] == False:
					continue
				try:
					remote_node.settimeout(5)
				except OSError:
					self.logger.error("Remote node is closed as .settimeout could not be set. Reporting node as offline")
					online[idx] = False
					continue
				fail_count = 0
				response = None
				while fail_count < 2:
					try:
						self.logger.info(f"Sending request {request}")
						send_prefixed(remote_node, json.dumps(request).encode())
						self.logger.info(f"Request sucessfully sent")
						response = json.loads(recv_prefixed(remote_node).decode())
						break
					except socket.timeout as e:
						self.logger.info(f"Remote node {remote_node} failed once")
						fail_count += 1
					except (RuntimeError, ConnectionResetError, ConnectionRefusedError, ConnectionAbortedError) as e:
						self.logger.info(f"Remote node {remote_node} failed once")
						fail_count += 1
				if fail_count >= 2:
					self.logger.info(f"Remote node {remote_node} failed twice and will no longer be contacted")
					online[idx] = False
				if response != None:
					self.logger.info(f"Received response: {response}")
					for block in response:
						if block not in self.consensusround_proposedblocks[round]:
							self.consensusround_proposedblocks[round].append(block)
					responses_count[idx] += 1
		can_decide = responses_count.count(self.failure_tolerance + 1) >= len(self.remote_nodes) - self.failure_tolerance
		for idx, node_online in enumerate(online):
			if not node_online:
				removed_socket = self.remote_nodes.pop(idx)
				self.logger.info(f"Removed socket {removed_socket}")
		if can_decide == False:
			self.logger.info(f"Not enough responses for a decision to be made")
			return None
		min_hash_block = None
		min_hash = None
		for block in self.consensusround_proposedblocks[round]:
			if len(block["transactions"]) < 1:
				continue

			current_hash = block["current_hash"]
			if min_hash == None:
				min_hash = current_hash
				min_hash_block = block
			if current_hash < min_hash:
				min_hash = current_hash
				min_hash_block = block
		
		self.logger.info(f"Round {self.current_round} Decided on {min_hash_block}")
		return min_hash_block
		

	def validate_transaction(self, transaction: dict):
		str_keys = ['sender','message', 'signature']
		try:
			if type(transaction) is not dict:
				self.logger.error(f"Error when validating transaction: payload is not a dict: {transaction}")
				return False
			if len(transaction) != 4:
				self.logger.error(f"Error when validating transaction: incorrect number of keys: {transaction}")
				return False
			for key in str_keys:
				if not isinstance(transaction[key], str):
					self.logger.error("Error when validating transaction: incorrect value types in dict")
					return False
			
			if not isinstance(transaction["nonce"], int):
				self.logger.error("Error when validating transaction: incorrect value in dict")
				return False
			pub_key_hex = transaction['sender']
			with self.blockchain_lock:
				for in_pool_transaction in self.blockchain.pool:
					if transaction["sender"] == in_pool_transaction["sender"] and transaction["nonce"] == in_pool_transaction["nonce"]:
						self.logger.error(f"There is already a transaction in the pool from this sender with this nonce")
						return False
				if self.blockchain.check_nonce(pub_key_hex, transaction['nonce']) == False:
					self.logger.error(f"Error when validating transaction: Nonce is not valid for key {pub_key_hex}")
					return False
			public_key = ed25519.Ed25519PublicKey.from_public_bytes(bytes.fromhex(pub_key_hex))

			if len(transaction['message']) > 70 or not transaction['message'].isalnum():
				self.logger.error("Error when validating transaction: message length > 70 or is not alnum")
				return False
			
			public_key.verify(bytes.fromhex(transaction['signature']), transaction_bytes(transaction))
			return True
		except Exception as e:
			self.logger.error(f"Transaction failed to validate {e}")
			return False

	def ensure_block_for_consensus_round(self, round: int):
    # Check if a block has already been proposed for the given round
		if round not in self.consensusround_block:
			proposed_block = self.blockchain.propose_new_block()
			self.logger.info(f"Ensuring block present for consensus round {proposed_block}")
			# Store the new block proposal for the given round
			self.consensusround_block[round] = proposed_block
			self.consensusround_proposedblocks[round] = [proposed_block]

	def pipeline(self):
		#1.
		#Wait for transaction pool to be ready
		#This can happen when the pool becomes non-empty
		#or when the node recieves a request from another node
		#asking for the value of the next round. This only happens when
		#the remote node has received a transaction and is ready to propose a
		#non - empty block
		
		#After one of these criterions is met, a node should wait for 2.5 seconds
		#before moving to operation 2

		while not self.stop_event.is_set():
			with self.s1_cond_lock:
				result = self.pipeline_s1_wait_cond.wait_for(lambda: self.pool_non_empty.is_set() or self.next_round_request.is_set(), 2)
				if result == False:
					continue
			time.sleep(2.5)
			self.current_round += 1

		#2.
		#With the transactions received from the previous step, 
		#Create a block proposal based on the current blockchain
			with self.blockchain_lock:
				self.ensure_block_for_consensus_round(self.current_round)

		#3.
		#Start the consensus broadcast routine.
		#Request values for the next block id from all other nodes.
		#The timeout for the response is 5 seonds
		#If the socket is closed or timeout is reached, retry one time
		#If retry fails, the node is considered crashed and should not be
		#Contacted in future rounds
		#The block chosen to be accepted is the one whose hash has the lowest
		#lexigraphical value
			block_to_commit = self.consensus_broadcast_routine(self.consensusround_block[self.current_round], self.current_round)
			# print(block_to_commit)

			if block_to_commit == None:
				continue

		#4.
		#Once the block proposal is accepted, append the block
		#to the blockchain and remove the included transactions from
		#the transaction pool. 
		#Note: there could be conflicting transactions from 
		#the same user based on the transaction nonce, the first
		#of these transactions can be included but any following 
		#transactions that conflict with it should be removed
		#from the block since they became invalid and cannot be comitted.
			with self.blockchain_lock:

				# print(f"Before {self.blockchain.pool}")
				self.blockchain.commit_block(block_to_commit)
				# print(f"AFter {self.blockchain.pool}")
				if len(self.blockchain.pool) == 0:
					self.pool_non_empty.clear()
			if self.current_round + 1 not in self.consensusround_block:
				self.next_round_request.clear()


# List clearing for some reason

import socket
import struct

def recv_exact(sock: socket.socket, msglen):
	chunks = []
	bytes_recd = 0
	while bytes_recd < msglen:
		chunk = sock.recv(min(msglen - bytes_recd, 2048))
		if chunk == b'':
			raise RuntimeError("socket connection broken")
		chunks.append(chunk)
		bytes_recd = bytes_recd + len(chunk)
	return b''.join(chunks)

def send_exact(sock: socket.socket, msg: bytes):
	totalsent = 0
	while totalsent < len(msg):
		sent = sock.send(msg[totalsent:])
		if sent == 0:
			raise RuntimeError("socket connection broken")
		totalsent = totalsent + sent

def recv_prefixed(sock: socket.socket):
	size_bytes = recv_exact(sock, 2)
	size = struct.unpack("!H", size_bytes)[0]
	if size == 0:
		raise RuntimeError("empty message")
	if size > 65535 - 2:
		raise RuntimeError("message too large")
	return recv_exact(sock, size)

def send_prefixed(sock: socket.socket, msg: bytes):
	size = len(msg)
	if size == 0:
		raise RuntimeError("empty message")
	if size > 65535 - 2:
		raise RuntimeError("message too large")
	size_bytes = struct.pack("!H", size)
	send_exact(sock, size_bytes + msg)


from node import *
import threading

# private key for transactions
private_key = ed25519.Ed25519PrivateKey.from_private_bytes(bytes.fromhex('6d4e02655d8214c145568cb3f3b84586ead2a85910f5b062d7f3f29ddcb4c7aa'))

# create nodes
runners = [ServerRunner('10.19.90.192', 9000, f=0)]

# 10.19.227.141

# start accepting incoming connections
for runner in runners:
	runner.start()
	
runners[0].append(RemoteNode('10.19.227.141', 9000))

# connect other nodes
# for i, runner in enumerate(runners):
# 	for j in range(4):
# 		if i != j:
# 			runner.append(RemoteNode('localhost', 9000 + j))

# create clients to send transactions
clients = [RemoteNode('10.19.90.192', 9000)]

# create a transaction
transaction = make_transaction('hello', private_key, 0)

transaction2 = make_transaction('howareyou', private_key, 1)

# set block callback
lock = threading.Lock()
cond = threading.Condition(lock)
blocks = []
def on_new_block(block):
	with lock:
		blocks.append(block)
		cond.notify()
for runner in runners:
	runner.blockchain.set_on_new_block(on_new_block)

# send the transaction
assert(clients[0].transaction(transaction) == True)

# runners[2].stop()
# runners.pop(2)

# wait for the block from all nodes
while True:
    with lock:
        cond.wait_for(lambda: len(blocks) == len(runners))

# check that the transaction is committed
# assert(all([block['transactions'][0] == transaction for block in blocks]))

# blocks = []

# assert(clients[1].transaction(transaction2) == True)

# # wait for the block from all nodes
# with lock:
# 	cond.wait_for(lambda: len(blocks) == len(runners))

# # check that the transaction is committed
# assert(all([block['transactions'][0] == transaction2 for block in blocks]))

# stop the nodes
for runner in runners:
	runner.stop()

